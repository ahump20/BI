name: Auto Deploy & Sync

on:
  push:
    branches: [main]
    paths:
      - 'austin-portfolio-deploy/**'
      - '.github/workflows/**'
      - 'package.json'
      - 'wrangler*.toml'
  
  # Manual trigger
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - preview
      sync_secrets:
        description: 'Sync secrets before deployment'
        required: true
        default: true
        type: boolean
      platforms:
        description: 'Platforms to deploy to'
        required: true
        default: 'cloudflare'
        type: choice
        options:
          - cloudflare
          - all

  # Trigger on secret changes
  repository_dispatch:
    types: [secrets-updated, deploy-request]

jobs:
  sync-secrets:
    name: Sync Secrets
    runs-on: ubuntu-latest
    if: github.event.inputs.sync_secrets != 'false'
    permissions:
      contents: read
      secrets: write
    outputs:
      secrets-synced: ${{ steps.sync.outputs.success }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Sync Secrets to Platforms
        id: sync
        uses: ./.github/workflows/secrets-sync.yml
        with:
          environment: ${{ github.event.inputs.environment || 'production' }}
          platforms: cloudflare,vercel,netlify
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CF_PAGES_PROJECT: ${{ secrets.CF_PAGES_PROJECT }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  deploy-cloudflare:
    name: Deploy to Cloudflare Pages
    runs-on: ubuntu-latest
    needs: [sync-secrets]
    if: always() && (contains(github.event.inputs.platforms, 'cloudflare') || contains(github.event.inputs.platforms, 'all') || github.event_name == 'push')
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build project
        run: npm run build
        env:
          # Build-time environment variables
          NODE_ENV: production
      
      - name: Deploy to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy austin-portfolio-deploy --project-name=blaze-intelligence --compatibility-date=2024-01-01
        env:
          # Make secrets available during deployment
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          PRODUCTION_API_KEY: ${{ secrets.PRODUCTION_API_KEY }}
      
      - name: Update deployment status
        if: success()
        run: |
          echo "✅ Cloudflare Pages deployment successful"
          echo "🔗 Site URL: https://blaze-intelligence.pages.dev"
      
      - name: Notify deployment failure
        if: failure()
        run: |
          echo "❌ Cloudflare Pages deployment failed"
          echo "Check logs for details"

  deploy-vercel:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [sync-secrets]
    if: contains(github.event.inputs.platforms, 'vercel') || contains(github.event.inputs.platforms, 'all')
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Install Vercel CLI
        run: npm install -g vercel
      
      - name: Deploy to Vercel
        run: |
          cd austin-portfolio-deploy
          vercel --prod --token ${{ secrets.VERCEL_TOKEN }} --yes
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

  deploy-netlify:
    name: Deploy to Netlify
    runs-on: ubuntu-latest
    needs: [sync-secrets]
    if: contains(github.event.inputs.platforms, 'netlify') || contains(github.event.inputs.platforms, 'all')
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Install Netlify CLI
        run: npm install -g netlify-cli
      
      - name: Deploy to Netlify
        run: |
          cd austin-portfolio-deploy
          netlify deploy --prod --dir . --site ${{ secrets.NETLIFY_SITE_ID }}
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

  test-deployment:
    name: Test Deployed Sites
    runs-on: ubuntu-latest
    needs: [deploy-cloudflare, deploy-vercel, deploy-netlify]
    if: always() && (needs.deploy-cloudflare.result == 'success' || needs.deploy-vercel.result == 'success' || needs.deploy-netlify.result == 'success')
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Wait for deployment propagation
        run: sleep 30
      
      - name: Test Cloudflare Pages
        if: needs.deploy-cloudflare.result == 'success'
        run: |
          echo "Testing Cloudflare Pages deployment..."
          curl -f -s https://blaze-intelligence.pages.dev/api/health || echo "Health check failed"
          curl -f -s https://blaze-intelligence.pages.dev | grep -q "Blaze Intelligence" && echo "✅ Site content verified" || echo "❌ Site content check failed"
      
      - name: Test API Endpoints
        run: |
          echo "Testing API endpoints..."
          # Test NIL Calculator
          curl -f -s "https://blaze-intelligence.pages.dev/api/nil-calculator?sport=football&performance=85" || echo "NIL API failed"
          
          # Test Cardinals Analytics
          curl -f -s "https://blaze-intelligence.pages.dev/api/analytics/cardinals" || echo "Cardinals API failed"
      
      - name: Performance Test
        run: |
          echo "Running performance test..."
          load_time=$(curl -w "%{time_total}" -s -o /dev/null https://blaze-intelligence.pages.dev)
          echo "Page load time: ${load_time}s"
          
          # Fail if load time is over 5 seconds
          if (( $(echo "$load_time > 5.0" | bc -l) )); then
            echo "❌ Site is too slow (${load_time}s > 5.0s)"
            exit 1
          else
            echo "✅ Performance acceptable (${load_time}s)"
          fi

  notify-success:
    name: Deployment Success Notification
    runs-on: ubuntu-latest
    needs: [deploy-cloudflare, test-deployment]
    if: always() && needs.deploy-cloudflare.result == 'success' && needs.test-deployment.result == 'success'
    
    steps:
      - name: Success Summary
        run: |
          echo "🎉 Blaze Intelligence deployment completed successfully!"
          echo ""
          echo "📊 Deployment Summary:"
          echo "• Platform: Cloudflare Pages"
          echo "• Environment: ${{ github.event.inputs.environment || 'production' }}"
          echo "• Triggered by: ${{ github.event_name }}"
          echo "• Commit: ${{ github.sha }}"
          echo ""
          echo "🔗 Live Site: https://blaze-intelligence.pages.dev"
          echo "⚙️  Dashboard: https://dash.cloudflare.com"
          echo "📊 Analytics: https://blaze-intelligence.pages.dev/dashboard"
          echo ""
          echo "✅ All tests passed"
          echo "⚡ Performance within acceptable limits"
          echo "🔐 Secrets synchronized successfully"

  notify-failure:
    name: Deployment Failure Notification
    runs-on: ubuntu-latest
    needs: [sync-secrets, deploy-cloudflare, test-deployment]
    if: always() && (needs.sync-secrets.result == 'failure' || needs.deploy-cloudflare.result == 'failure' || needs.test-deployment.result == 'failure')
    
    steps:
      - name: Failure Summary
        run: |
          echo "❌ Blaze Intelligence deployment failed!"
          echo ""
          echo "📊 Failure Summary:"
          echo "• Secrets sync: ${{ needs.sync-secrets.result }}"
          echo "• Cloudflare deploy: ${{ needs.deploy-cloudflare.result }}"
          echo "• Testing: ${{ needs.test-deployment.result }}"
          echo ""
          echo "🔧 Troubleshooting:"
          echo "• Check GitHub Actions logs"
          echo "• Verify secrets are properly configured"
          echo "• Ensure platform authentication is working"
          echo "• Review Cloudflare dashboard for errors"
          echo ""
          echo "📚 Documentation: DEPLOYMENT_SECRETS_SETUP.md"

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-cloudflare, test-deployment, notify-success, notify-failure]
    if: always()
    
    steps:
      - name: Cleanup temporary files
        run: |
          echo "🧹 Cleaning up deployment artifacts..."
          # Any cleanup tasks
          echo "Cleanup completed"