name: Secrets Sync
on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment (production|preview)"
        default: "production"
        required: true
        type: choice
        options:
          - production
          - preview
      platforms:
        description: "Comma list: cloudflare,netlify,vercel,github,replit"
        default: "cloudflare,netlify,vercel,github"
        required: true

jobs:
  sync:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      secrets: write
    env:
      # ---- Provider credentials (set these in GitHub Secrets) ----
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      CF_WORKER_NAME: ${{ secrets.CF_WORKER_NAME }}
      CF_PAGES_PROJECT: ${{ secrets.CF_PAGES_PROJECT }}
      
      NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
      NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
      
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      
      GH_TOKEN: ${{ secrets.GH_SYNC_TOKEN || secrets.GITHUB_TOKEN }}
      REPLIT_TOKEN: ${{ secrets.REPLIT_TOKEN }}
      
      # ---- Blaze Intelligence APP SECRETS ----
      # AI Services
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      OPENAI_WEBHOOK_SECRET: ${{ secrets.OPENAI_WEBHOOK_SECRET }}
      OPENAI_SERVICE_ACCOUNT_KEY: ${{ secrets.OPENAI_SERVICE_ACCOUNT_KEY }}
      OPENAI_PROJECT_ID: ${{ secrets.OPENAI_PROJECT_ID }}
      
      ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      ANTHROPIC_ADMIN_KEY: ${{ secrets.ANTHROPIC_ADMIN_KEY }}
      ANTHROPIC_ORGANIZATION_ID: ${{ secrets.ANTHROPIC_ORGANIZATION_ID }}
      
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      GEMINI_API_KEY_2: ${{ secrets.GEMINI_API_KEY_2 }}
      GEMINI_API_KEY_3: ${{ secrets.GEMINI_API_KEY_3 }}
      
      XAI_API_KEY: ${{ secrets.XAI_API_KEY }}
      XAI_API_KEY_SECRET: ${{ secrets.XAI_API_KEY_SECRET }}
      XAI_BEARER_TOKEN: ${{ secrets.XAI_BEARER_TOKEN }}
      XAI_ACCESS_TOKEN: ${{ secrets.XAI_ACCESS_TOKEN }}
      XAI_ACCESS_TOKEN_SECRET: ${{ secrets.XAI_ACCESS_TOKEN_SECRET }}
      
      HUGGINGFACE_ACCESS_TOKEN: ${{ secrets.HUGGINGFACE_ACCESS_TOKEN }}
      DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
      
      # Cloudflare R2 Storage
      R2_ACCOUNT_ID: ${{ secrets.R2_ACCOUNT_ID }}
      R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
      R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
      R2_ENDPOINT: ${{ secrets.R2_ENDPOINT }}
      
      # Sports Data & Analytics
      SPORTSRADAR_ID: ${{ secrets.SPORTSRADAR_ID }}
      SPORTSRADAR_MASTER_API_KEY: ${{ secrets.SPORTSRADAR_MASTER_API_KEY }}
      SPORTSRADAR_VAULT_KEY: ${{ secrets.SPORTSRADAR_VAULT_KEY }}
      
      BLAZE_CLIENT_ID: ${{ secrets.BLAZE_CLIENT_ID }}
      BLAZE_CLIENT_SECRET: ${{ secrets.BLAZE_CLIENT_SECRET }}
      BLAZE_CLIENT_ID_2: ${{ secrets.BLAZE_CLIENT_ID_2 }}
      BLAZE_SECRET_KEY: ${{ secrets.BLAZE_SECRET_KEY }}
      PRODUCTION_API_KEY: ${{ secrets.PRODUCTION_API_KEY }}
      
      # Payment & Financial
      STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}
      STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
      PLAID_RECOVERY_CODE: ${{ secrets.PLAID_RECOVERY_CODE }}
      
      # Productivity & Collaboration
      CLICKUP_API_TOKEN: ${{ secrets.CLICKUP_API_TOKEN }}
      NOTION_INTEGRATION_SECRET: ${{ secrets.NOTION_INTEGRATION_SECRET }}
      AIRTABLE_API_KEY: ${{ secrets.AIRTABLE_API_KEY }}
      POSTMAN_API_KEY: ${{ secrets.POSTMAN_API_KEY }}
      POSTMAN_ACCESS_KEY: ${{ secrets.POSTMAN_ACCESS_KEY }}
      
      # Integrations
      HUBSPOT_ACCESS_TOKEN: ${{ secrets.HUBSPOT_ACCESS_TOKEN }}
      HUBSPOT_CLIENT_SECRET: ${{ secrets.HUBSPOT_CLIENT_SECRET }}
      ZAPIER_API_KEY: ${{ secrets.ZAPIER_API_KEY }}
      COUPLER_PERSONAL_ACCESS_TOKEN: ${{ secrets.COUPLER_PERSONAL_ACCESS_TOKEN }}
      
      # Authentication & Identity
      AUTH0_MANAGEMENT_API_TOKEN: ${{ secrets.AUTH0_MANAGEMENT_API_TOKEN }}
      
      # Development Tools
      GITHUB_TOKEN_FINE: ${{ secrets.GITHUB_TOKEN_FINE }}
      GITHUB_FINE_GRAINED_TOKEN: ${{ secrets.GITHUB_FINE_GRAINED_TOKEN }}
      GITHUB_CLIENT_SECRET: ${{ secrets.GITHUB_CLIENT_SECRET }}
      SOCKET_DEV_TOKEN: ${{ secrets.SOCKET_DEV_TOKEN }}
      CURSOR_API_KEY: ${{ secrets.CURSOR_API_KEY }}
      SENTRY_PERSONAL_TOKEN: ${{ secrets.SENTRY_PERSONAL_TOKEN }}
      SENTRY_ORGANIZATION_ID: ${{ secrets.SENTRY_ORGANIZATION_ID }}
      NGROK_API_TOKEN: ${{ secrets.NGROK_API_TOKEN }}
      
      # Media & Content
      CLOUDINARY_KEY: ${{ secrets.CLOUDINARY_KEY }}
      WIX_API_KEY: ${{ secrets.WIX_API_KEY }}
      WIX_ACCOUNT_ID: ${{ secrets.WIX_ACCOUNT_ID }}
      CUCUMBER_STUDIO_ACCESS_TOKEN: ${{ secrets.CUCUMBER_STUDIO_ACCESS_TOKEN }}
      CUCUMBER_STUDIO_CLIENT_ID: ${{ secrets.CUCUMBER_STUDIO_CLIENT_ID }}
      CUCUMBER_STUDIO_UID: ${{ secrets.CUCUMBER_STUDIO_UID }}
      
      # AWS
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

    steps:
      - uses: actions/checkout@v4

      - name: Parse inputs
        id: p
        run: |
          echo "ENV_NAME=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          echo "PLATFORMS=${{ github.event.inputs.platforms }}" >> $GITHUB_OUTPUT

      - name: Prepare secrets.env from declared env
        run: |
          # Write only non-empty env vars into secrets.env
          SECRETS=(
            # AI Services
            OPENAI_API_KEY OPENAI_WEBHOOK_SECRET OPENAI_SERVICE_ACCOUNT_KEY OPENAI_PROJECT_ID
            ANTHROPIC_API_KEY ANTHROPIC_ADMIN_KEY ANTHROPIC_ORGANIZATION_ID
            GEMINI_API_KEY GEMINI_API_KEY_2 GEMINI_API_KEY_3
            XAI_API_KEY XAI_API_KEY_SECRET XAI_BEARER_TOKEN XAI_ACCESS_TOKEN XAI_ACCESS_TOKEN_SECRET
            HUGGINGFACE_ACCESS_TOKEN DEEPSEEK_API_KEY
            
            # Cloudflare R2
            R2_ACCOUNT_ID R2_ACCESS_KEY_ID R2_SECRET_ACCESS_KEY R2_ENDPOINT
            
            # Sports Data
            SPORTSRADAR_ID SPORTSRADAR_MASTER_API_KEY SPORTSRADAR_VAULT_KEY
            BLAZE_CLIENT_ID BLAZE_CLIENT_SECRET BLAZE_CLIENT_ID_2 BLAZE_SECRET_KEY PRODUCTION_API_KEY
            
            # Payment
            STRIPE_PUBLISHABLE_KEY STRIPE_SECRET_KEY PLAID_RECOVERY_CODE
            
            # Productivity
            CLICKUP_API_TOKEN NOTION_INTEGRATION_SECRET AIRTABLE_API_KEY
            POSTMAN_API_KEY POSTMAN_ACCESS_KEY
            
            # Integrations
            HUBSPOT_ACCESS_TOKEN HUBSPOT_CLIENT_SECRET ZAPIER_API_KEY COUPLER_PERSONAL_ACCESS_TOKEN
            
            # Auth
            AUTH0_MANAGEMENT_API_TOKEN
            
            # Development
            GITHUB_TOKEN_FINE GITHUB_FINE_GRAINED_TOKEN GITHUB_CLIENT_SECRET
            SOCKET_DEV_TOKEN CURSOR_API_KEY SENTRY_PERSONAL_TOKEN SENTRY_ORGANIZATION_ID NGROK_API_TOKEN
            
            # Media
            CLOUDINARY_KEY WIX_API_KEY WIX_ACCOUNT_ID
            CUCUMBER_STUDIO_ACCESS_TOKEN CUCUMBER_STUDIO_CLIENT_ID CUCUMBER_STUDIO_UID
            
            # AWS
            AWS_ACCOUNT_ID
          )
          : > secrets.env
          for k in "${SECRETS[@]}"; do
            v="${!k}"
            if [ -n "$v" ]; then
              printf '%s=%s\n' "$k" "$v" >> secrets.env
            fi
          done
          echo "Generated secrets.env with $(wc -l < secrets.env) entries"

      # ---------- GitHub (repo) ----------
      - name: Sync to GitHub Repo Secrets (optional)
        if: contains(steps.p.outputs.PLATFORMS, 'github')
        run: |
          while IFS='=' read -r k v; do
            gh secret set "$k" --repo "${{ github.repository }}" --body "$v"
          done < secrets.env

      # ---------- Netlify ----------
      - name: Install Netlify CLI
        if: contains(steps.p.outputs.PLATFORMS, 'netlify')
        run: npm i -g netlify-cli

      - name: Sync to Netlify
        if: contains(steps.p.outputs.PLATFORMS, 'netlify')
        run: |
          while IFS='=' read -r k v; do
            netlify env:set "$k" "$v" --site "$NETLIFY_SITE_ID"
          done < secrets.env

      # ---------- Vercel ----------
      - name: Install Vercel CLI
        if: contains(steps.p.outputs.PLATFORMS, 'vercel')
        run: npm i -g vercel

      - name: Sync to Vercel (prod)
        if: contains(steps.p.outputs.PLATFORMS, 'vercel') && steps.p.outputs.ENV_NAME == 'production'
        run: |
          while IFS='=' read -r k v; do
            printf '%s' "$v" | vercel env add "$k" production --token "$VERCEL_TOKEN" --yes
          done < secrets.env

      - name: Sync to Vercel (preview)
        if: contains(steps.p.outputs.PLATFORMS, 'vercel') && steps.p.outputs.ENV_NAME != 'production'
        run: |
          while IFS='=' read -r k v; do
            printf '%s' "$v" | vercel env add "$k" preview --token "$VERCEL_TOKEN" --yes
          done < secrets.env

      # ---------- Cloudflare (Workers/Pages) ----------
      - name: Install Wrangler
        if: contains(steps.p.outputs.PLATFORMS, 'cloudflare')
        run: npm i -g wrangler

      - name: Sync to Cloudflare Workers (secrets)
        if: contains(steps.p.outputs.PLATFORMS, 'cloudflare') && env.CF_WORKER_NAME != ''
        run: |
          while IFS='=' read -r k v; do
            echo "$v" | npx wrangler secret put "$k" --env ${{ steps.p.outputs.ENV_NAME }} --name "$CF_WORKER_NAME"
          done < secrets.env

      - name: Sync to Cloudflare Pages (project secrets)
        if: contains(steps.p.outputs.PLATFORMS, 'cloudflare') && env.CF_PAGES_PROJECT != ''
        run: |
          while IFS='=' read -r k v; do
            echo "$v" | npx wrangler pages secret put "$k" --project-name "$CF_PAGES_PROJECT"
          done < secrets.env

      # ---------- Replit (best-effort) ----------
      - name: Write .env for Replit (manual import)
        if: contains(steps.p.outputs.PLATFORMS, 'replit')
        run: |
          cp secrets.env .env
          echo "::notice title=Replit::Wrote .env (import via Replit Secrets UI if needed)."

      - name: Clean up sensitive files
        if: always()
        run: |
          rm -f secrets.env .env
          echo "Cleaned up temporary secret files"
