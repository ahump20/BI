/** * Blaze Intelligence Sentry Error Tracking & Performance Monitoring * Captures errors, performance metrics, and user sessions */window.BLAZE_SENTRY = {    DSN: 'https:    ENVIRONMENT: window.location.hostname.includes('localhost') ? 'development' : 'production',    RELEASE: 'blaze-intelligence@2.0.0',    TRACES_SAMPLE_RATE: 0.1,     REPLAYS_SESSION_SAMPLE_RATE: 0.1,     REPLAYS_ON_ERROR_SAMPLE_RATE: 1.0,     PERFORMANCE_BUDGETS: {        FCP: 1800,         LCP: 2500,         FID: 100,          CLS: 0.1,          TTFB: 600      }};function initializeSentry() {    if (typeof Sentry === 'undefined') {        const script = document.createElement('script');        script.src = 'https:        script.crossOrigin = 'anonymous';        script.onload = () => configureSentry();        document.head.appendChild(script);    } else {        configureSentry();    }}function configureSentry() {    if (typeof Sentry === 'undefined') return;    Sentry.init({        dsn: window.BLAZE_SENTRY.DSN,        environment: window.BLAZE_SENTRY.ENVIRONMENT,        release: window.BLAZE_SENTRY.RELEASE,        integrations: [            new Sentry.BrowserTracing({                routingInstrumentation: Sentry.reactRouterV6Instrumentation(                    window.history,                    ['/', '/demo', '/contact', '/api-docs']                ),                tracingOrigins: [                    'localhost',                    'blaze-intelligence.com',                    /^\                ],                _experiments: {                    enableLongTask: true,                    enableInteractions: true                }            }),            new Sentry.Replay({                maskAllText: false,                blockAllMedia: false,                maskTextContent: false,                maskInputOptions: {                    password: true,                    email: true                },                networkDetailAllowUrls: [                    window.location.origin                ],                networkCaptureBodies: true,                networkRequestHeaders: ['X-API-Key'],                networkResponseHeaders: ['Content-Type']            })        ],        tracesSampleRate: window.BLAZE_SENTRY.TRACES_SAMPLE_RATE,        replaysSessionSampleRate: window.BLAZE_SENTRY.REPLAYS_SESSION_SAMPLE_RATE,        replaysOnErrorSampleRate: window.BLAZE_SENTRY.REPLAYS_ON_ERROR_SAMPLE_RATE,        autoSessionTracking: true,        ignoreErrors: [            'top.GLOBALS',            'fb_xd_fragment',            /extensions\            /^chrome:\/\            'Non-Error promise rejection captured',            'ResizeObserver loop limit exceeded'        ],        denyUrls: [            /graph\.facebook\.com/i,            /extensions\            /^chrome:\/\        ],        beforeBreadcrumb(breadcrumb, hint) {            if (breadcrumb.category === 'console' && breadcrumb.level === 'debug') {                return null;            }            return breadcrumb;        },        beforeSend(event, hint) {            if (window.BLAZE_USER) {                event.user = {                    id: window.BLAZE_USER.id,                    email: window.BLAZE_USER.email,                    username: window.BLAZE_USER.username                };            }            event.contexts = {                ...event.contexts,                blaze: {                    version: window.BLAZE_SENTRY.RELEASE,                    feature_flags: window.BLAZE_FEATURES || {},                    ab_tests: window.BlazeAB ? window.BlazeAB.getUserTests() : {}                }            };            if (window.BLAZE_SENTRY.ENVIRONMENT === 'development' && !window.SENTRY_DEBUG) {                console.log('Sentry Event (dev):', event);                return null;            }            return event;        }    });    Sentry.setContext('blaze_intelligence', {        platform: 'web',        product: 'sports_analytics',        api_version: 'v2'    });    Sentry.setTags({        page: window.location.pathname,        browser: getBrowserInfo(),        viewport: `${window.innerWidth}x${window.innerHeight}`    });    console.log('Sentry error tracking initialized');}function trackError(error, context = {}) {    if (typeof Sentry !== 'undefined') {        Sentry.captureException(error, {            contexts: {                blaze_error: context            }        });    } else {        console.error('Blaze Error:', error, context);    }}function trackPerformance(transaction, data = {}) {    if (typeof Sentry !== 'undefined') {        const txn = Sentry.startTransaction({            name: transaction,            data: data        });        Sentry.getCurrentHub().configureScope(scope => scope.setSpan(txn));        return txn;    }    return null;}function monitorWebVitals() {    new PerformanceObserver((list) => {        for (const entry of list.getEntries()) {            if (entry.name === 'first-contentful-paint') {                const fcp = Math.round(entry.startTime);                trackMetric('FCP', fcp);                checkPerformanceBudget('FCP', fcp);            }        }    }).observe({ entryTypes: ['paint'] });    new PerformanceObserver((list) => {        const entries = list.getEntries();        const lastEntry = entries[entries.length - 1];        const lcp = Math.round(lastEntry.renderTime || lastEntry.loadTime);        trackMetric('LCP', lcp);        checkPerformanceBudget('LCP', lcp);    }).observe({ entryTypes: ['largest-contentful-paint'] });    new PerformanceObserver((list) => {        for (const entry of list.getEntries()) {            const fid = Math.round(entry.processingStart - entry.startTime);            trackMetric('FID', fid);            checkPerformanceBudget('FID', fid);        }    }).observe({ entryTypes: ['first-input'] });    let clsValue = 0;    new PerformanceObserver((list) => {        for (const entry of list.getEntries()) {            if (!entry.hadRecentInput) {                clsValue += entry.value;                trackMetric('CLS', clsValue);                checkPerformanceBudget('CLS', clsValue);            }        }    }).observe({ entryTypes: ['layout-shift'] });    window.addEventListener('load', () => {        const navTiming = performance.getEntriesByType('navigation')[0];        if (navTiming) {            const ttfb = Math.round(navTiming.responseStart - navTiming.requestStart);            trackMetric('TTFB', ttfb);            checkPerformanceBudget('TTFB', ttfb);        }    });}function trackMetric(name, value, unit = 'ms') {    if (typeof Sentry !== 'undefined') {        Sentry.captureMessage(`Performance: ${name}`, {            level: 'info',            extra: {                metric: name,                value: value,                unit: unit            }        });    }    if (window.BlazeAnalytics) {        window.BlazeAnalytics.track('performance_metric', {            metric_name: name,            metric_value: value,            metric_unit: unit        });    }    console.log(`Performance Metric - ${name}: ${value}${unit}`);}function checkPerformanceBudget(metric, value) {    const budget = window.BLAZE_SENTRY.PERFORMANCE_BUDGETS[metric];    if (budget && value > budget) {        const exceeded = ((value - budget) / budget * 100).toFixed(1);        trackError(new Error(`Performance budget exceeded: ${metric}`), {            metric: metric,            value: value,            budget: budget,            exceeded_by: `${exceeded}%`        });        console.warn(`⚠️ Performance Budget Exceeded - ${metric}: ${value} (budget: ${budget}, +${exceeded}%)`);    }}window.addEventListener('error', (event) => {    trackError(event.error || new Error(event.message), {        source: event.filename,        line: event.lineno,        column: event.colno    });});window.addEventListener('unhandledrejection', (event) => {    trackError(new Error(event.reason), {        type: 'unhandled_promise_rejection',        promise: event.promise    });});window.addEventListener('error', (event) => {    if (event.target !== window) {        trackError(new Error('Resource loading error'), {            resource: event.target.src || event.target.href,            type: event.target.tagName        });    }}, true);function getBrowserInfo() {    const ua = navigator.userAgent;    if (ua.includes('Chrome')) return 'Chrome';    if (ua.includes('Firefox')) return 'Firefox';    if (ua.includes('Safari')) return 'Safari';    if (ua.includes('Edge')) return 'Edge';    return 'Unknown';}function initUptimeMonitoring() {    setInterval(() => {        fetch('/api/health')            .then(response => {                if (!response.ok) {                    trackError(new Error('Health check failed'), {                        status: response.status,                        statusText: response.statusText                    });                }            })            .catch(error => {                trackError(error, {                    type: 'health_check_error'                });            });    }, 30000);}document.addEventListener('DOMContentLoaded', function() {    initializeSentry();    setTimeout(() => {        monitorWebVitals();        initUptimeMonitoring();        console.log('Performance monitoring initialized');    }, 1000);});window.BlazeSentry = {    trackError: trackError,    trackPerformance: trackPerformance,    trackMetric: trackMetric,    initialize: initializeSentry};